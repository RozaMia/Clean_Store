from django.contrib import admin
from django.utils.html import format_html
from unfold.admin import ModelAdmin
from .models import Category, Subcategory, Product, ProductImage, OrderItem, Order, ContactMessage

class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 1
    verbose_name = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    verbose_name_plural = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

class SubcategoryInline(admin.TabularInline):
    model = Subcategory
    extra = 1
    verbose_name = "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    verbose_name_plural = "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

@admin.register(Category)
class CategoryAdmin(ModelAdmin):
    list_display = ['title', 'image_preview', 'subcategory_count', 'is_active', 'created_at']
    list_display_links = ['title']
    list_filter = ['is_active', 'created_at']
    search_fields = ['title', 'description']
    prepopulated_fields = {'slug': ('title',)}
    inlines = [SubcategoryInline]
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'description', 'is_active')
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('image', 'image_preview_large'),
            'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 800x600 –ø–∏–∫—Å–µ–ª–µ–π (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 4:3). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ, —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.'
        }),
    )
    readonly_fields = ['image_preview_large']
    ordering = ['-created_at']
    
    def image_preview(self, obj):
        if obj.image:
            return format_html(
                '<img src="{}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;">',
                obj.image.url
            )
        return 'üñºÔ∏è –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    image_preview.short_description = '–ü—Ä–µ–≤—å—é'
    
    def image_preview_large(self, obj):
        if obj.image:
            return format_html(
                '<img src="{}" style="max-width: 300px; max-height: 200px; object-fit: cover; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">',
                obj.image.url
            )
        return format_html(
            '<div style="padding: 20px; background: #f5f5f5; border-radius: 10px; text-align: center; color: #666;">üñºÔ∏è<br>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>'
        )
    image_preview_large.short_description = '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    
    def subcategory_count(self, obj):
        count = obj.subcategories.count()
        return f'{count} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π'
    subcategory_count.short_description = '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º change_view, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏ "General" –∏ "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    def change_view(self, request, object_id, form_url='', extra_context=None):
        extra_context = extra_context or {}
        extra_context['title'] = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        return super().change_view(request, object_id, form_url, extra_context)

    def get_urls(self):
        from django.urls import path
        urls = super().get_urls()
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ URL, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return urls


@admin.register(Subcategory)
class SubcategoryAdmin(ModelAdmin):
    list_display = ['title', 'category', 'image_preview', 'product_count', 'is_active', 'created_at']
    list_display_links = ['title']
    list_filter = ['category', 'is_active', 'created_at']
    search_fields = ['title', 'category__title', 'description']
    prepopulated_fields = {'slug': ('title',)}
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'category', 'description', 'is_active')
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('image', 'image_preview_large'),
            'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 600x400 –ø–∏–∫—Å–µ–ª–µ–π.'
        }),
    )
    readonly_fields = ['image_preview_large']
    ordering = ['-created_at']

    def image_preview(self, obj):
        if obj.image:
            return format_html(
                '<img src="{}" style="width: 40px; height: 40px; object-fit: cover; border-radius: 5px;">',
                obj.image.url
            )
        return 'üñºÔ∏è –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    image_preview.short_description = '–ü—Ä–µ–≤—å—é'
    
    def image_preview_large(self, obj):
        if obj.image:
            return format_html(
                '<img src="{}" style="max-width: 250px; max-height: 150px; object-fit: cover; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">',
                obj.image.url
            )
        return format_html(
            '<div style="padding: 15px; background: #f5f5f5; border-radius: 10px; text-align: center; color: #666;">üñºÔ∏è<br>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>'
        )
    image_preview_large.short_description = '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    
    def product_count(self, obj):
        count = obj.product_set.count()
        return f'{count} —Ç–æ–≤–∞—Ä–æ–≤'
    product_count.short_description = '–¢–æ–≤–∞—Ä—ã'

    # –î–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    def change_view(self, request, object_id, form_url='', extra_context=None):
        extra_context = extra_context or {}
        subcategory = self.get_object(request, object_id)
        if subcategory:
            extra_context['subtitle'] = f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory.title}"
            extra_context['back_url'] = f"/admin/appProducts/category/{subcategory.category.id}/change/"
        return super().change_view(request, object_id, form_url, extra_context)


@admin.register(Product)
class ProductAdmin(ModelAdmin):
    list_display = ['name', 'subcategory', 'price', 'is_active', 'created_at']
    list_display_links = ['name']
    list_editable = ['price', 'is_active']
    list_filter = ['subcategory__category', 'subcategory', 'is_active', 'created_at', 'is_new', 'is_hit', 'is_sale']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    inlines = [ProductImageInline]
    exclude = ['created_at', 'updated_at']
    ordering = ['-created_at']

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ subcategory –≤–º–µ—Å—Ç–æ category
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "subcategory":
            # –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            kwargs["queryset"] = Subcategory.objects.filter(is_active=True)
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

@admin.register(ProductImage)
class ProductImageAdmin(ModelAdmin):
    list_display = ['product', 'image']
    list_filter = ['product']
    search_fields = ['product__name']
    ordering = ['product']

class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 0

@admin.register(Order)
class OrderAdmin(ModelAdmin):
    list_display = ['id', 'first_name', 'last_name', 'status', 'total_price', 'created_at']
    list_filter = ['status', 'created_at']
    list_editable = ['status']
    inlines = [OrderItemInline]
    readonly_fields = ['user', 'first_name', 'last_name', 'phone', 'address', 'total_price', 'created_at']


@admin.register(ContactMessage)
class ContactMessageAdmin(ModelAdmin):
    list_display = ['name', 'email', 'category_display', 'status', 'created_at', 'has_phone']
    list_display_links = ['name']
    list_filter = ['category', 'status', 'created_at']
    list_editable = ['status']
    search_fields = ['name', 'email', 'subject', 'message']
    readonly_fields = ['name', 'email', 'phone', 'category', 'subject', 'message', 'created_at']
    ordering = ['-created_at']
    
    fieldsets = (
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ', {
            'fields': ('name', 'email', 'phone', 'created_at')
        }),
        ('–û–±—Ä–∞—â–µ–Ω–∏–µ', {
            'fields': ('category', 'subject', 'message')
        }),
        ('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
            'fields': ('status', 'admin_notes', 'resolved_at'),
            'classes': ('collapse',)
        }),
    )
    
    def category_display(self, obj):
        colors = {
            'general': '#6b7280',
            'help': '#3b82f6',
            'return': '#f59e0b',
            'complaint': '#ef4444',
            'suggestion': '#10b981',
            'technical': '#8b5cf6',
            'cooperation': '#06b6d4',
            'other': '#6b7280',
        }
        color = colors.get(obj.category, '#6b7280')
        return format_html(
            '<span style="background-color: {}; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color, obj.get_category_display()
        )
    category_display.short_description = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    
    def status_display(self, obj):
        colors = {
            'new': '#ef4444',
            'in_progress': '#f59e0b',
            'resolved': '#10b981',
            'closed': '#6b7280',
        }
        color = colors.get(obj.status, '#6b7280')
        return format_html(
            '<span style="background-color: {}; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color, obj.get_status_display()
        )
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def has_phone(self, obj):
        if obj.phone:
            return format_html('<span style="color: green;">‚úì</span>')
        return format_html('<span style="color: red;">‚úó</span>')
    has_phone.short_description = '–¢–µ–ª–µ—Ñ–æ–Ω'
    
    def change_view(self, request, object_id, form_url='', extra_context=None):
        extra_context = extra_context or {}
        message = self.get_object(request, object_id)
        if message:
            extra_context['title'] = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.name}'
        return super().change_view(request, object_id, form_url, extra_context)
    
    # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    def mark_as_in_progress(self, request, queryset):
        count = queryset.update(status='in_progress')
        self.message_user(request, f'{count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ "–í —Ä–∞–±–æ—Ç–µ"')
    mark_as_in_progress.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ "–í —Ä–∞–±–æ—Ç–µ"'
    
    def mark_as_resolved(self, request, queryset):
        from django.utils import timezone
        count = queryset.update(status='resolved', resolved_at=timezone.now())
        self.message_user(request, f'{count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ "–†–µ—à–µ–Ω–æ"')
    mark_as_resolved.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ "–†–µ—à–µ–Ω–æ"'
    
    actions = ['mark_as_in_progress', 'mark_as_resolved']